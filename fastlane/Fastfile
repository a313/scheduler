PREFIX = "fvm flutter"
# Get the root of the project
def root_path
	Dir.pwd.sub(/.*\Kfastlane/, '').sub(/.*\Kandroid/, '').sub(/.*\Kios/, '').sub(/.*\K\/\//, '')
end

# Lanes
private_lane :fetch_dependencies do
	sh("#{PREFIX} pub get")
end

private_lane :build_autogenerated_code do
	sh("#{PREFIX} pub run build_runner build --delete-conflicting-outputs")
end

private_lane :clean_build_folder do
	sh("#{PREFIX} clean")
end

lane :build_ipa do |options|
	build_env = (options[:env] ? options[:env] : "dev")
	method = (options[:method] ? options[:method]: "development")
	sh("#{PREFIX} build ipa -t lib/main.dart --export-method #{method}")
end

lane :build_apk do |options|
	build_env = (options[:env] ? options[:env] : "dev")
	sh("#{PREFIX} build apk -t lib/main.dart")
end

lane :build_app_bundle do |options|
	build_env = (options[:env] ? options[:env] : "dev")
	sh("#{PREFIX} build appbundle --flavor #{build_env} -t lib/main_#{build_env}.dart")
end

lane :upload_firebase_distribution do |options|
	firebase_app_distribution(
		app: "1:289109535313:ios:1cefb9f44bbd01f06c6670",
		ipa_path: "./build/ios/ipa/aio.ipa", # Chỉ định đường dẫn thủ công đến file IPA    
		groups: "NhaGao",
		release_notes: get_release_note(options)
 	)
end

lane :cd do |options|  
	build_env = (options[:env] ? options[:env] : "dev")  
	note = options[:note]

	clean_build_folder
	fetch_dependencies
	build_autogenerated_code
	begin
		build_ipa(env:build_env, method:"development")    
		upload_firebase_distribution(env:build_env, note:note)
		upload_dSYM(env:build_env)		
	rescue => ex
		UI.error(ex)
	end
	# begin
	# 	build_apk(env:build_env)    
	# 	upload_appcenter_apk(env:build_env, note:note)
	# rescue => ex
	# 	UI.error(ex)
	# end
end

desc "Upload symbols to Crashlytics"
  lane :upload_dSYM do |options|
	build_env = (options[:env] ? options[:env] : "dev")
	dsym_folder_path = "./build/ios/archive/Runner.xcarchive/dSYMs"
  	dsym_files = Dir.glob("#{dsym_folder_path}/*.dSYM")
	upload_symbols_to_crashlytics(
		gsp_path:"./ios/Runner/GoogleService-Info.plist",
		dsym_paths: dsym_files,
		binary_path: "fastlane/scripts/upload-symbols"
	)
	
  end

def get_release_note(options)
	build_env = (options[:env] ? options[:env] : "dev")
	note = (options[:note] ? options[:note] : "No Release Note")
	if "#{build_env}" == "dev"
		return "Environment Build: DEV \n#{note}"
	elseif "#{build_env}" == "prod"
		return "Environment Build: PRODUCTION \n#{note}"
	else
		return "Environment Build: STG \n#{note}"
	end
end
