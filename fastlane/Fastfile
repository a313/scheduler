import("./constant/Fastfile")
# Get the root of the project
def root_path
	Dir.pwd.sub(/.*\Kfastlane/, '').sub(/.*\Kandroid/, '').sub(/.*\Kios/, '').sub(/.*\K\/\//, '')
end

# Lanes
private_lane :fetch_dependencies do
	sh("#{PREFIX} pub get")
end

private_lane :build_autogenerated_code do
	sh("#{PREFIX} pub run build_runner build --delete-conflicting-outputs")
end

private_lane :clean_build_folder do
	sh("#{PREFIX} clean")
end

lane :fetch_appcenter_version do
	# android = appcenter_fetch_version_number(
	# 	api_token:APPCENTER_API_TOKEN,
	# 	owner_name: APPCENTER_OWNER_NAME,	
	# 	app_name: APPCENTER_ANDROID_NAME,
	# )	
	# android_ver = android["version"]
	# android_build = android["build_number"]

	ios = appcenter_fetch_version_number(
		api_token: APPCENTER_API_TOKEN,
		owner_name: APPCENTER_OWNER_NAME,	
		app_name: APPCENTER_IOS_NAME,
	)
	ios_ver = ios["version"]
	ios_build = ios["build_number"]

	UI.success("--------------------------------------------")
	# UI.important("Last build version: #{android_ver}+#{android_build}")
	UI.important("Last build version: #{ios_ver}+#{ios_build}")
	UI.success("--------------------------------------------")

end

lane :build_ipa do |options|
	build_env = (options[:env] ? options[:env] : "dev")
	method = (options[:method] ? options[:method]: "development")
	sh("#{PREFIX} build ipa -t lib/main.dart --export-method #{method}")
end

lane :build_apk do |options|
	build_env = (options[:env] ? options[:env] : "dev")
	sh("#{PREFIX} build apk -t lib/main.dart")
end

lane :build_app_bundle do |options|
	build_env = (options[:env] ? options[:env] : "dev")
	sh("#{PREFIX} build appbundle --flavor #{build_env} -t lib/main_#{build_env}.dart")
end

lane :upload_appcenter_apk do |options|
	build_env = (options[:env] ? options[:env] : "dev")
	apk_file_path = File.join(root_path, ANDROID_APK_FILE_PATH % { build_env: build_env })
		appcenter_upload(
		api_token: APPCENTER_API_TOKEN,
		owner_name: APPCENTER_OWNER_NAME,
		owner_type: APPCENTER_OWNER_TYPE,
		app_name: APPCENTER_ANDROID_NAME,
		file: apk_file_path,
		notify_testers: true,
		release_notes: get_release_note(options)
	)
end

lane :upload_appcenter_ipa do |options|
	ipa_file_path = File.join(root_path, IOS_IPA_FILE_PATH) 
	appcenter_upload(
		api_token: APPCENTER_API_TOKEN,
		owner_name: APPCENTER_OWNER_NAME,
		owner_type: APPCENTER_OWNER_TYPE,
		app_name: APPCENTER_IOS_NAME,
		file: ipa_file_path,
		notify_testers: true,
		release_notes: get_release_note(options)
	)
end

lane :submit_ios do |options|

	build_env = (options[:env] ? options[:env] : "dev")

	ipa_file_path = File.join(root_path, IOS_IPA_FILE_PATH)    
	api_key = app_store_connect_api_key(
		key_id: APPSTORE_API_KEY_ID,    
		issuer_id: APPSTORE_API_ISSUER_ID,
		key_filepath: APPSTORE_API_KEY_PATH,
	)  
	pilot(
		api_key: api_key,
		ipa: ipa_file_path,
		skip_waiting_for_build_processing: true,
		skip_submission: true,
		distribute_external: false,
		notify_external_testers: false,
	)
end


lane :submit_and do |options|
	build_env = (options[:env] ? options[:env] : "dev")
  track = (options[:track] ? options[:track] : "internal")
	aab_file_path = File.join(root_path, ANDROID_AAB_FILE_PATH % { build_env: build_env })
	# json_key = json_key_file(PLAYSTORE_API_KEY_PATH)
	# puts(json_key)
	supply(
		aab: aab_file_path,
		json_key: PLAYSTORE_API_KEY_PATH,
		package_name: PACKAGE_NAME,
		track: track,
		release_status: 'draft', # Specify the release status of the AAB
		skip_upload_apk: true, # Upload the aab instead of apk
		skip_upload_metadata: true,
		skip_upload_changelogs: true,
		skip_upload_images: true,
		skip_upload_screenshots: true
	)
end

lane :appcenter do |options|  
	build_env = (options[:env] ? options[:env] : "dev")  
	note = options[:note]

	clean_build_folder
	fetch_dependencies
	build_autogenerated_code
	begin
		build_ipa(env:build_env, method:"development")    
		upload_dSYM(env:build_env)
		upload_appcenter_ipa(env:build_env, note:note)
	rescue => ex
		UI.error(ex)
	end
	# begin
	# 	build_apk(env:build_env)    
	# 	upload_appcenter_apk(env:build_env, note:note)
	# rescue => ex
	# 	UI.error(ex)
	# end
end

lane :submit do |options|  
	build_env = (options[:env] ? options[:env] : "prod")  

	clean_build_folder
	fetch_dependencies
	build_autogenerated_code       
	begin
		build_ipa(env:build_env, method:"app-store")    
		upload_dSYM(env:build_env)
		submit_ios(env:build_env)
	rescue => ex
	  UI.error(ex)
	end
	begin
		build_app_bundle(env:build_env)    
		submit_and(env:build_env, track:"internal")
	rescue => ex
		UI.error(ex)
	end
end

desc "Upload symbols to Crashlytics"
  lane :upload_dSYM do |options|
	build_env = (options[:env] ? options[:env] : "dev")	
	upload_symbols_to_crashlytics(gsp_path:"./ios/GoogleService-Info.plist",
	binary_path: 'fastlane/scripts/upload-symbols')
  end

def get_release_note(options)
	build_env = (options[:env] ? options[:env] : "dev")
	note = (options[:note] ? options[:note] : "No Release Note")
	if "#{build_env}" == "dev"
		return "Environment Build: DEV \n#{note}"
	elseif "#{build_env}" == "prod"
		return "Environment Build: PRODUCTION \n#{note}"
	else
		return "Environment Build: STG \n#{note}"
	end
end
